const f=(e,t)=>{const r=t>0?e.src.charAt(t-1):"",i=t+1<=e.posMax?e.src.charAt(t+1):"";return{canOpen:i!==" "&&i!=="	",canClose:!(r===" "||r==="	"||/[0-9]/u.exec(i))}},h=(e,t)=>{let r,i,c,o;if(e.src[e.pos]!=="$")return!1;if(c=f(e,e.pos),!c.canOpen)return t||(e.pending+="$"),e.pos+=1,!0;const s=e.pos+1;for(r=s;(r=e.src.indexOf("$",r))!==-1;){for(i=r-1;e.src[i]==="\\";)i-=1;if((r-i)%2===1)break;r+=1}return r===-1?(t||(e.pending+="$"),e.pos=s,!0):r-s===0?(t||(e.pending+="$$"),e.pos=s+1,!0):(c=f(e,r),c.canClose?(t||(o=e.push("math_inline","math",0),o.markup="$",o.content=e.src.slice(s,r)),e.pos=r+1,!0):(t||(e.pending+="$"),e.pos=s,!0))},$=(e,t,r,i)=>{let c,o,s,u,n=!1,l=e.bMarks[t]+e.tShift[t],a=e.eMarks[t];if(l+2>a||e.src.slice(l,l+2)!=="$$")return!1;if(l+=2,c=e.src.slice(l,a),i)return!0;for(c.trim().endsWith("$$")&&(c=c.trim().slice(0,-2),n=!0),s=t;!n&&(s+=1,!(s>=r||(l=e.bMarks[s]+e.tShift[s],a=e.eMarks[s],l<a&&e.tShift[s]<e.blkIndent)));)e.src.slice(l,a).trim().endsWith("$$")&&(u=e.src.slice(0,a).lastIndexOf("$$"),o=e.src.slice(l,u),n=!0);e.line=s+1;const p=e.push("math_block","math",0);return p.block=!0,p.content=(c!=null&&c.trim()?`
${c}
`:`
`)+e.getLines(t+1,s,e.tShift[t],!0)+(o!=null&&o.trim()?o:""),p.map=[t,e.line],p.markup="$$",!0},m=(e,t)=>{const{render:r}=t||{};if(typeof r!="function")throw new Error('[@mdit/plugin-tex]: "render" option should be a function');e.inline.ruler.after("escape","math_inline",h),e.block.ruler.after("blockquote","math_block",$,{alt:["paragraph","reference","blockquote","list"]}),e.renderer.rules.math_inline=(i,c,o,s)=>r(i[c].content,!1,s),e.renderer.rules.math_block=(i,c,o,s)=>r(i[c].content,!0,s)};export{m as tex};
//# sourceMappingURL=index.mjs.map
