"use strict";var v=require("node:fs"),p=require("upath");const w=/\r\n?|\n/g,_=e=>{const r=e.split(`
`),t=r.reduce((s,c)=>{for(let n=0;n<c.length;n++)if(c[n]!==" "&&c[n]!=="	")return Math.min(n,s);return s},1/0);return t<1/0?r.map(s=>s.slice(t)).join(`
`):e},E=[/^\/\/ ?#?((?:end)?region) ([\w*-]+)$/,/^\/\* ?#((?:end)?region) ([\w*-]+) ?\*\/$/,/^#pragma ((?:end)?region) ([\w*-]+)$/,/^<!-- #?((?:end)?region) ([\w*-]+) -->$/,/^#((?:End )Region) ([\w*-]+)$/,/^::#((?:end)region) ([\w*-]+)$/,/^# ?((?:end)?region) ([\w*-]+)$/],I=/^( *)<!--\s*@include:\s*([^<>|:"*?]+(?:\.[a-z0-9]+))(?:#([\w-]+))?(?:\{(\d+)?-(\d+)?\})?\s*-->\s*$/gm,P=(e,r,t,s=!1)=>{const[c,n,o]=r.exec(e.trim())||[];return!!(c&&n&&o===t&&n.match(s?/^[Ee]nd ?[rR]egion$/:/^[rR]egion$/))},S=(e,r)=>{let t=null,s=-1;for(const[c,n]of e.entries())if(t===null){for(const o of E)if(P(n,o,r)){s=c+1,t=o;break}}else if(P(n,t,r,!0))return{lineStart:s,lineEnd:c};return null},$=(e,{cwd:r,includedFiles:t,resolvedPath:s})=>{const{filePath:c}=e;let n=c;if(!p.isAbsolute(c)){if(!r)return console.error(`[@mdit/plugin-include]: Error when resolving path: ${c}`),`
Error when resolving path
`;n=p.resolve(r,c)}if(t.push(n),!v.existsSync(n))return console.error(`[@mdit/plugin-include]: ${n} not found`),`
File not found
`;const o=v.readFileSync(n).toString().replace(w,`
`).split(`
`);let l=[];if("region"in e){const i=S(o,e.region);i&&(l=o.slice(i.lineStart,i.lineEnd))}else{const{lineStart:i,lineEnd:u}=e;l=o.slice(i&&i-1,u)}if(s&&n.endsWith(".md")){const i=p.dirname(n);l.unshift(`@include-push(${i})`),l.push("@include-pop()")}return _(l.join(`
`).replace(/\n?$/,`
`))},g=(e,r,{cwd:t,includedFiles:s})=>e.replace(I,(c,n,o,l,i,u)=>{const d=r.resolvePath(o,t),a=r.resolveImagePath||r.resolveLinkPath,h=$({filePath:d,...l?{region:l}:{lineStart:i?Number(i):0,lineEnd:u?Number(u):void 0}},{cwd:t,includedFiles:s,resolvedPath:a});return(r.deep&&d.endsWith(".md")?g(h,r,{cwd:p.isAbsolute(d)?p.dirname(d):t?p.resolve(t,p.dirname(d)):null,includedFiles:s}):h).split(`
`).map(f=>n+f).join(`
`)}),k=e=>r=>{const t=r.env,s=t.includedFiles||(t.includedFiles=[]),c=e.currentPath(t);r.src=g(r.src,e,{cwd:c?p.dirname(c):null,includedFiles:s})},F=/^@include-push\(([^)]*?)\)$/,y=/^@include-pop\(\)$/,R=(e,r,t,s)=>{const c=e.bMarks[r]+e.tShift[r],n=e.eMarks[r],o=e.src.slice(c,n);let l=o.startsWith("@include-push");if(l){const i=o.match(F);if(i){if(s)return!0;const[,u]=i;e.line=r+1;const d=e.push("include_push","",0);d.map=[r,e.line],d.info=u,d.markup="include_push"}else l=!1}return l},A=(e,r,t,s)=>{const c=e.bMarks[r]+e.tShift[r],n=e.eMarks[r],o=e.src.slice(c,n);let l=o.startsWith("@include-pop");if(l)if(o.match(y)){if(s)return!0;e.line=r+1;const i=e.push("include_pop","",0);i.map=[r,e.line],i.markup="include_pop"}else l=!1;return l},b=(e,r,t,s)=>{var c;const n=r.attrIndex(e),o=(c=r.attrs)==null?void 0:c[n][1];if(o!=null&&o.startsWith(".")&&Array.isArray(s)){const{length:l}=s;if(l){const i=p.relative(p.dirname(t),s[l-1]);r.attrs[n][1]=`.${p.sep}${p.join(i,o)}`}}},W=(e,r)=>{const{currentPath:t,resolvePath:s=l=>l,deep:c=!1,resolveLinkPath:n=!0,resolveImagePath:o=!0}=r||{};if(typeof t!="function")return console.error('[@mdit/plugin-include]: "currentPath" is required');if(e.core.ruler.after("normalize","md_import",k({currentPath:t,resolvePath:s,deep:c,resolveLinkPath:n,resolveImagePath:o})),o||n){if(e.block.ruler.before("table","md_include_push",R,{alt:["paragraph","reference","blockquote","list"]}),e.block.ruler.before("table","md_include_pop",A,{alt:["paragraph","reference","blockquote","list"]}),e.renderer.rules.include_push=(l,i,u,d)=>{const a=l[i];return(d.includedPaths??(d.includedPaths=[])).push(a.info),""},e.renderer.rules.include_pop=(l,i,u,d)=>{const a=d.includedPaths;return Array.isArray(a)?a.pop():console.error("[@mdit/plugin-include]: include_pop failed, no include_push."),""},o){const l=e.renderer.rules.image;e.renderer.rules.image=(i,u,d,a,h)=>{const f=i[u],m=t(a);return m&&b("src",f,m,a.includedPaths),l(i,u,d,a,h)}}if(n){const l=e.renderer.rules.link_open||((i,u,d,a,h)=>h.renderToken(i,u,d));e.renderer.rules.link_open=(i,u,d,a,h)=>{const f=i[u],m=t(a);return m&&b("href",f,m,a.includedPaths),l(i,u,d,a,h)}}}};exports.createIncludeCoreRule=k,exports.handleInclude=$,exports.include=W,exports.resolveInclude=g;
//# sourceMappingURL=index.cjs.map
